using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace ProjectionEnumGenerator;

[Generator]
public class ProjectionEnumGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var viewModels = context.SyntaxProvider
            .CreateSyntaxProvider(
                static (node, _) => node is ClassDeclarationSyntax { BaseList: not null },
                static (ctx, _) =>
                {
                    if (ctx.Node is not ClassDeclarationSyntax classSyntax)
                        return null;

                    if (ctx.SemanticModel.GetDeclaredSymbol(classSyntax) is not INamedTypeSymbol projectionTypeSymbol)
                        return null;

                    var baseType = projectionTypeSymbol.BaseType;
                    while (baseType is not null)
                    {
                        if (baseType.ConstructedFrom.Name is "SingleStreamProjection" or "MultiStreamProjection" &&
                            baseType.TypeArguments[0] is INamedTypeSymbol viewModel)
                            return new ViewModelWithProjection(viewModel, projectionTypeSymbol);

                        baseType = baseType.BaseType;
                    }

                    return null;
                })
            .Where(static x => x is not null)
            .Select(static (x, _) => x!)
            .Collect();
        context.RegisterSourceOutput(viewModels, (ctx, symbols) =>
        {
            var codeBuilder = new StringBuilder();
            codeBuilder.AppendLine("""
                                   // <auto-generated />
                                   using Marten;
                                   using MartenExample.Endpoints;

                                   namespace MartenExample;

                                   public enum ProjectionEnum
                                   {
                                   """);
            foreach (var symbol in symbols)
            {
                codeBuilder.AppendLine($"    {symbol.ViewModel.Name},");
            }

            codeBuilder.AppendLine("""
                                   }

                                   public enum SingleStreamProjectionEnum
                                   {
                                   """);
            foreach (var symbol in symbols.Where(p => InheritsFrom(p.Projection, "SingleStreamProjection")))
            {
                codeBuilder.AppendLine($"    {symbol.ViewModel.Name},");
            }

            codeBuilder.AppendLine("""
                                   }

                                   public static class ProjectionEnumExtensions
                                   {
                                       public static string GetProjectionViewModelName(this ProjectionEnum value)
                                       {
                                           return value switch
                                           {
                                   """);
            foreach (var symbol in symbols.Where(symbol =>
                         symbol.ViewModel.AllInterfaces.Any(i => i.Name == "IProjection")))
            {
                codeBuilder.AppendLine(
                    $"            ProjectionEnum.{symbol.ViewModel.Name} => \"{symbol.ViewModel.ToDisplayString()}\",");
            }

            codeBuilder.AppendLine("""
                                               _ => value.ToString()
                                           };
                                       }

                                       public static async Task RebuildSingleStreamAsync(this SingleStreamProjectionEnum value,  IDocumentStore store, Guid streamId )
                                       {
                                           switch (value)
                                           {
                                   """);

            foreach (var symbol in symbols.Where(p => InheritsFrom(p.Projection, "SingleStreamProjection")))
            {
                codeBuilder.AppendLine($"""
                                                    case SingleStreamProjectionEnum.{symbol.ViewModel.Name}: 
                                                        await store.Advanced.RebuildSingleStreamAsync<{symbol.ViewModel.Name}>(streamId);
                                                        break;
                                        """);
            }

            codeBuilder.AppendLine("""
                                           }
                                       }
                                   }
                                   """);


            ctx.AddSource("ProjectionEnum.g.cs", codeBuilder.ToString());
        });
    }

    private static bool InheritsFrom(INamedTypeSymbol symbol, string baseName)
    {
        var current = symbol.BaseType;
        while (current != null)
        {
            if (current.OriginalDefinition.Name == baseName) return true;

            current = current.BaseType;
        }

        return false;
    }

    private class ViewModelWithProjection(INamedTypeSymbol viewModel, INamedTypeSymbol projection)
    {
        public INamedTypeSymbol ViewModel { get; } = viewModel;
        public INamedTypeSymbol Projection { get; } = projection;
    }
}