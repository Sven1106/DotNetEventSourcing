using System.Collections.Immutable;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace EndpointsGenerator;

[Generator]
public class Generator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var provider = context.SyntaxProvider.CreateSyntaxProvider(
            (node, _) => node is ClassDeclarationSyntax t &&
                         t.BaseList?.Types.Any(x => x.Type.ToString() == "IEndpoint") == true,
            (syntaxContext, _) => (ClassDeclarationSyntax)syntaxContext.Node
        ).Where(x => x is not null);

        var compilation = context.CompilationProvider
            .Combine(provider.Collect());

        context.RegisterSourceOutput(compilation, Execute);
    }

    private void Execute(SourceProductionContext context,
        (Compilation compilation, ImmutableArray<ClassDeclarationSyntax> classes) tuple)
    {
        var (compilation, classes) = tuple;
        var endpointNamespaces = classes
            .Select(syntax =>
                compilation.GetSemanticModel(syntax.SyntaxTree)
                    .GetDeclaredSymbol(syntax)?.ContainingNamespace.ToDisplayString()
            )
            .Where(ns => !string.IsNullOrWhiteSpace(ns))
            .Distinct()
            .ToList();
        var codeBuilder = new StringBuilder();
        codeBuilder.AppendLine("// <auto-generated />");
        foreach (var ns in endpointNamespaces)
        {
            codeBuilder.AppendLine($"using {ns};");
        }

        codeBuilder.AppendLine("""

                               namespace EndpointsGenerator;

                               public static class EndpointsExtension
                               {
                                    public static IEndpointRouteBuilder MapAllEndpoints(this IEndpointRouteBuilder endpoints)
                                    {
                               """);

        foreach (var syntax in classes)
        {
            var symbol = compilation.GetSemanticModel(syntax.SyntaxTree)
                .GetDeclaredSymbol(syntax) as INamedTypeSymbol;

            codeBuilder.AppendLine(
                $"         {symbol!.Name}.MapEndpoints(endpoints.MapGroup(\"\").WithTags(\"{symbol.Name.Replace("Endpoints", "")}\"));");
        }

        codeBuilder.AppendLine("""
                                        return endpoints;
                                    }
                               }
                               """);

        context.AddSource("EndpointsExtension.g.cs", codeBuilder.ToString());
    }
}